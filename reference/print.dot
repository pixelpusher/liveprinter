/*

go: 

wait 
or
use stored vars to convert to cartesian
run extrudeto

*/



/*
extrudeto
let extrusionSpecified = (params.e !== undefined);
        // set retract, but if only e given don't retract (that would be dumb)
        // remember that a retract setting here overrides internal autoretract!
        let retract = (params.retract === undefined) ? !extrusionSpecified && this._autoRetract : params.retract; // don't retract if given e value alone, no matter what

        if (Math.abs(__e - this.e) > 0.01) 
        {
            this.currentRetraction = 0; //clear retraction if we go manual
        }

*/

digraph movement {

    splines="TRUE";

    /* Entities */

    //start [shape="point"]

    startgo [label=<go( )>, shape="ellipse" ]

    checkwait [label="waiting\ntime set?" shape="diamond"]    

    "printer\nwaits" [shape="house"]

    calcmovedist  [label="calculate\nrelative\nmove"]

    startmoveto [label=<moveto( )>, shape="ellipse" ]


    startmove [label=<move( )>, shape="ellipse" ]

    checkparamsmove [label=<angle or<br/>distance<br/>specified?> shape="diamond"]    

    startextrude [label=<extrude( )>, shape="ellipse" ]

    checkparams [label=<angle or<br/>distance<br/>specified?> shape="diamond"]    

    checkextruding [label=<extrusion<br/>specified?> shape="diamond"]    
    
    "printer\nmovement" [label="printer\nmovement:\nextrudeto( )", shape="house"]

    /* Relationships */
    
    //start -> {startgo startextrude startmove}


    startmove -> checkparamsmove 
    checkparamsmove -> startgo [label="yes"]
    checkparamsmove -> calcmovedist [label="no"]
    calcmovedist -> "set\nextrusion\nto 0"
    //"set\nextrusion\nto 0" -> "set\ntravel speed"

    "set\nextrusion\nto 0" -> "printer\nmovement"

    startmoveto -> "set\nextrusion\nto 0"
    
    ////// EXTRUDE () --------------------
    
    startextrude -> checkparams

    checkparams -> startgo [label=<yes>]

    checkparams -> "calculate\nrelative\nextrusion" [label=<no>]

    "calculate\nrelative\nextrusion" -> "printer\nmovement"


    ////// GO () -------------------------

    startgo -> checkwait

    checkwait -> "calculate\nrelative\nmove"

    "calculate\nrelative\nmove" -> checkextruding

    checkwait -> "printer\nwaits"  [label="yes"]

    checkextruding -> "printer\nmovement" [label=<yes<br/>(printing)>]

    checkextruding -> "set\nextrusion\nto 0" [label=<no<br/>(traveling)>]

    //"set\nprint speed" -> "printer\nmovement"

    //"set\ntravel speed" -> "printer\nmovement"

    //unretract -> error [label="printer error"]

    //unretract -> "printing"

    //wait -> quit[label="response received"]
    //wait -> error[label="no response"]

    /* Ranks */
    subgraph start { rank=same; startgo; startextrude; startmove; startmoveto};
}
